// Code generated by sqlc. DO NOT EDIT.

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/jmoiron/sqlx"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

type DBOption struct {
	MaxOpen     int
	MaxIdle     int
	MaxLifetime int
}

func GetDBConnectionString() string {
	s := fmt.Sprintf("%s:%s@%s:%d/%s%s", "root", "secret", "127.0.0.1", "5432", "nft_collection", nil)
	return fmt.Sprintf("postgresql://%s", s)
}

func NewDBByConn(dsn string) (*sqlx.DB, error) {
	db, err := sqlx.Open("postgres", dsn)

	if err != nil {
		return nil, err
	}

	// force a connection and test that it worked
	err = db.Ping()
	if err != nil {
		return nil, err
	}

	return db, nil
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

type Queries struct {
	db DBTX
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db: tx,
	}
}
