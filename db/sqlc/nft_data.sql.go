// Code generated by sqlc. DO NOT EDIT.
// source: nft_data.sql

package sqlc

import (
	"context"
)

const deleteNftDataByUrl = `-- name: DeleteNftDataByUrl :exec
DELETE FROM nft_data WHERE url=$1
`

func (q *Queries) DeleteNftDataByUrl(ctx context.Context, url string) error {
	_, err := q.db.ExecContext(ctx, deleteNftDataByUrl, url)
	return err
}

const getListNft = `-- name: GetListNft :many
SELECT id, url, memo
FROM nft_data
LIMIT $1
`

func (q *Queries) GetListNft(ctx context.Context, limit int32) ([]NftDatum, error) {
	rows, err := q.db.QueryContext(ctx, getListNft, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NftDatum
	for rows.Next() {
		var i NftDatum
		if err := rows.Scan(&i.ID, &i.Url, &i.Memo); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNFtDataByUrl = `-- name: GetNFtDataByUrl :one
SELECT id, url, memo
FROM nft_data
WHERE url = $1
LIMIT 1
`

func (q *Queries) GetNFtDataByUrl(ctx context.Context, url string) (NftDatum, error) {
	row := q.db.QueryRowContext(ctx, getNFtDataByUrl, url)
	var i NftDatum
	err := row.Scan(&i.ID, &i.Url, &i.Memo)
	return i, err
}

const getNftDataByID = `-- name: GetNftDataByID :one
SELECT id, url, memo
FROM nft_data
WHERE id=$1
LIMIT 1
`

func (q *Queries) GetNftDataByID(ctx context.Context, id string) (NftDatum, error) {
	row := q.db.QueryRowContext(ctx, getNftDataByID, id)
	var i NftDatum
	err := row.Scan(&i.ID, &i.Url, &i.Memo)
	return i, err
}

const insertNftData = `-- name: InsertNftData :exec
INSERT INTO nft_data (
    id,
    url,
    memo
) VALUES (
    $1, $2, $3
         )
`

type InsertNftDataParams struct {
	ID   string `json:"id"`
	Url  string `json:"url"`
	Memo string `json:"memo"`
}

func (q *Queries) InsertNftData(ctx context.Context, arg InsertNftDataParams) error {
	_, err := q.db.ExecContext(ctx, insertNftData, arg.ID, arg.Url, arg.Memo)
	return err
}
